//문제 풀이 방법: dfs를 이용해서 모든 연결 상태를 확인한다.
//속도를 늘리기 위한 고려점
//	1)boundary에 붙어 있는 core는 vector에 insert하지 않는다.
//	2)dfs에서 확인할 사항은
//		- 4가지 방향으로 연결 가능하면, 연결 하고 dfs(next)
//		- 4가지 방향 모두 확인 후, 연결 하지 않고 dfs(next)
//			->처음에는 연결이 불가능하면 연결 하지 않고 dfs(next)를 호출하였는데, 불필요한 호출로 인한 시간 초과 발생
//			->또한 4방향 모두 연결이 가능할 때, 고려하지 못하는 case가 발생할 수 있었다.
//	3)dfs에서 결과 update는 마지막 노드(index == vector_size)일때만 수행해야 한다.
//	시간 복잡도: connect, disconnect는 O(N)
//				is_valid는 O(1)
//				process_all_dfs는 O(5^N(4가지 방향과 연결 하지 않는 case를 N의 깊이로 dfs 수행)*N(connect와 disconnect))

#include <iostream>
#include <vector>
#include <cstdlib>
#include <cstring>

#define MAX_N 13

using namespace std;

int g_max_connect, g_min_line;
vector<pair<int,int>> g_cores;
int map[MAX_N][MAX_N];

const pair<int, int> dir_adder[] = { {1,0},{-1,0},{0,1},{0,-1} };
int g_N;

bool is_valid(pair<int, int> point) {
	if (point.first >= 0 && point.second >= 0 && point.first <= g_N - 1 && point.second <= g_N - 1) {
		return true;
	}
	return false;
}

bool connect(pair<int, int> point, int dir,int &added_line) {
	if(is_valid(point)) {
		if (map[point.first][point.second] != 0) {
			return false;
		}
		else {
			map[point.first][point.second] = 2; // line
			added_line++;
			pair<int, int> next = { point.first + dir_adder[dir].first,point.second + dir_adder[dir].second };
			if (connect(next, dir, added_line) == false) {
				if(map[point.first][point.second] == 2)
					map[point.first][point.second] = 0;
				return false;
			}
		}
	}

	return true;
}

void disconnect(pair<int, int> point, int dir) {
	pair<int, int> next = { point.first + dir_adder[dir].first, point.second + dir_adder[dir].second };
	while (is_valid(next)) {
		if (map[next.first][next.second] != 2)
			break;

		map[next.first][next.second] = 0;
		next.first += dir_adder[dir].first;
		next.second += dir_adder[dir].second;
	}
}

void process_all_dfs(int core_index, int max_connect, int min_line) {	
	if (core_index == g_cores.size()) {
		if (max_connect > g_max_connect) {
			g_max_connect = max_connect;
			g_min_line = min_line;


		}
		else if (max_connect == g_max_connect && min_line < g_min_line) {
			g_min_line = min_line;
		}

		return;
	}

	pair<int, int> cur_core = g_cores[core_index];
	for (int dir = 0; dir < 4; dir++) {
		pair<int, int> next_point = { cur_core.first + dir_adder[dir].first, cur_core.second + dir_adder[dir].second };
		int added_line = 0;
		bool connect_success = connect(next_point, dir, added_line);
		if (connect_success == false) continue;
		else {
			process_all_dfs(core_index + 1, max_connect + 1, min_line + added_line);
			disconnect(cur_core, dir);
		}
	}

	process_all_dfs(core_index + 1, max_connect, min_line);
}

int main(void) {
	int T;
	cin >> T;

	for (int t = 1; t <= T; t++) {
		g_max_connect = g_min_line = 0;
		memset(map, 0, sizeof(map));
		g_cores.clear();

		int N;
		cin >> N;
		g_N = N;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				int c;
				cin >> c;
				map[i][j] = c;

				if (c == 1) {
					if (i == 0 || j == 0 || i == N - 1 || j == N - 1) {
						g_max_connect++;
					}
					else {
						g_cores.push_back(make_pair(i, j));
					}
				}
			}
		}

		process_all_dfs(0, g_max_connect, g_min_line);

		cout << "#" << t << " " << g_min_line << endl;
	}

	return 0;
}
