#include <iostream>
#include <cstring>
#include <algorithm>
#include <bitset>

using namespace std;

#define MAX_D 20
#define INF_PASS_NUM 30

int input_ab[MAX_D][MAX_D];
int cur_ab[MAX_D][MAX_D];
int check[MAX_D][MAX_D];
int max_cnt = INF_PASS_NUM;

void setRow(int target_row, int max_col, int set_num) {
	for (int i = 0; i < max_col; i++) {
		cur_ab[target_row][i] = set_num;
	}
}

void desetRow(int target_row, int max_col) {
	for (int i = 0; i < max_col; i++) {
		cur_ab[target_row][i] = input_ab[target_row][i];
	}
}

bitset<MAX_D> passCheck(int cur_row, int col, int pass_num, bitset<MAX_D> already_pass, int set_val) {
	for (int i = 0; i < col; i++) {
		int cur_val;
		if (set_val == -1) cur_val = input_ab[cur_row][i];
		else cur_val = set_val;
		
		if (cur_row == 0) check[0][i] = 1;
		else {
			if (cur_ab[cur_row - 1][i] == cur_val) {
				check[cur_row][i] = check[cur_row - 1][i] + 1;
			}
			else {
				check[cur_row][i] = 1;
			}
		}

		cur_ab[cur_row][i] = cur_val;

		if (check[cur_row][i] >= pass_num) already_pass[i] = 1;
	}

	return already_pass;
}

void getMinPassNum(int row, int col, int pass_num, int start_row, int cur_result,bitset<MAX_D> already_pass) {
	if (cur_result > row) return;
	
	if (start_row == row) {
		if (already_pass.count() == col) max_cnt = (max_cnt > cur_result) ? cur_result : max_cnt;
		return;
	}

	getMinPassNum(row, col, pass_num, start_row + 1, cur_result, passCheck(start_row,col,pass_num,already_pass,-1));
	getMinPassNum(row, col, pass_num, start_row + 1, cur_result + 1, passCheck(start_row, col, pass_num, already_pass, 0));
	getMinPassNum(row, col, pass_num, start_row + 1, cur_result + 1, passCheck(start_row, col, pass_num, already_pass, 1));
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	int T;
	cin >> T;
	for (int t = 0; t < T; t++) {
		memset(check, 0, sizeof(check));
		max_cnt = INF_PASS_NUM;

		int D, W, K;
		cin >> D >> W >> K;
		for (int i = 0; i < D; i++) {
			for (int j = 0; j < W; j++) {
				int c;
				cin >> c;
				input_ab[i][j] = c;
			}
		}

		bitset<MAX_D> already_pass(0);

		getMinPassNum(D, W, K, 0, 0,already_pass);
		cout << "#" << t + 1 << " " << max_cnt << endl;
	}

	return 0;
}
