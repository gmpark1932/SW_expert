#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

queue<pair<int,int>> customer_arrive;
queue<int> repair_queue;

vector<int> recep_delay;
vector<int> repair_delay;
vector<int> recep_ready;
vector<int> repair_ready;
vector<int> customer_using_recep;
vector<int> customer_using_repair;
vector<int> recep_used_by_customer;

#define MAX_TIME 2000
#define NO_EMPTY_DESK -1

int findEmptyDesk(vector<int> desks) {
	for (int i = 1; i < desks.size(); i++) {
		if (desks[i] == 0) return i;
	}
	return NO_EMPTY_DESK;
}

void timeFlowInDesk(vector<int> &desks, vector<int> customer_using_desk, queue<int> &ready_queue) {
	for (int i = 1; i < desks.size(); i++) {
		if (desks[i] > 0) {
			desks[i]--;
			if (desks[i] == 0) {
				ready_queue.push(customer_using_desk[i]);
				customer_using_desk[i] = 0;
			}
		}
	}
}

void timeFlowInDesk(vector<int> &desks, vector<int> customer_using_desk, int& count) {
	for (int i = 1; i < desks.size(); i++) {
		if (desks[i] > 0) {
			desks[i]--;
			if (desks[i] == 0) {
				count++;
				customer_using_desk[i] = 0;
			}
		}
	}
}


int Solution(int target_recep, int target_repair) {
	int finished_customer = 0;
	int total_customer = customer_arrive.size();
	int now_time = 0;
	int result = 0;

	while (finished_customer < total_customer) {
		//cout << finished_customer << " " << total_customer << endl;
		bool recep_flow_ready, repair_flow_ready;
		recep_flow_ready = repair_flow_ready = false;

		if(customer_arrive.empty() == false){
			pair<int, int> customer = customer_arrive.front();
			int empty_recep_desk = findEmptyDesk(recep_ready);
			if (customer.second <= now_time && empty_recep_desk != NO_EMPTY_DESK) {
				recep_ready[empty_recep_desk] = recep_delay[empty_recep_desk];
				customer_using_recep[empty_recep_desk] = customer.first;
				recep_used_by_customer[customer.first] = empty_recep_desk;
				customer_arrive.pop();
			}
			else {
				recep_flow_ready = true;
			}
		}
		else {
			recep_flow_ready = true;
		}

		if (repair_queue.empty() == false) {
			int repair_customer = repair_queue.front();
			int empty_repair_desk = findEmptyDesk(repair_ready);
			if (empty_repair_desk != NO_EMPTY_DESK) {
				repair_ready[empty_repair_desk] = repair_delay[empty_repair_desk];
				customer_using_repair[empty_repair_desk] = repair_customer;
				repair_queue.pop();
				if (recep_used_by_customer[repair_customer] == target_recep && empty_repair_desk == target_repair) {
					result += repair_customer;
				}
			}
			else {
				repair_flow_ready = true;
			}
		}
		else {
			repair_flow_ready = true;
		}

		if (recep_flow_ready == true && repair_flow_ready == true) {
			now_time++;
			timeFlowInDesk(recep_ready, customer_using_recep, repair_queue);
			timeFlowInDesk(repair_ready, customer_using_repair, finished_customer);
		}
	}

	if (result == 0) result = -1;

	return result;
}

int main(void) {
	int T;

	cin >> T;

	for (int t = 0; t < T; t++) {
		int recep_desk, repair_desk, customer_num, target_recep, target_repair;

		cin >> recep_desk >> repair_desk >> customer_num >> target_recep >> target_repair;

		recep_delay.push_back(0);
		repair_delay.push_back(0);
		recep_ready.push_back(0);
		repair_ready.push_back(0);
		customer_using_recep.push_back(0);
		customer_using_repair.push_back(0);
		recep_used_by_customer.push_back(0);

		for (int i = 0; i < recep_desk; i++) {
			int input_delay;
			cin >> input_delay;
			recep_delay.push_back(input_delay);
			recep_ready.push_back(0);
			customer_using_recep.push_back(0);
		}

		for (int i = 0; i < repair_desk; i++) {
			int input_delay;
			cin >> input_delay;
			repair_delay.push_back(input_delay);
			repair_ready.push_back(0);
			customer_using_repair.push_back(0);
		}

		for (int i = 0; i < customer_num; i++) {
			int input_arrive;
			cin >> input_arrive;
			customer_arrive.push(make_pair(i+1,input_arrive));
			recep_used_by_customer.push_back(0);
		}

		int result = Solution(target_recep, target_repair);

		cout << "#" << t + 1 << " " << result << endl;

		recep_delay.clear();
		repair_delay.clear();
		recep_ready.clear();
		repair_ready.clear();
		customer_using_recep.clear();
		customer_using_repair.clear();
		recep_used_by_customer.clear();
	}


	return 0;
}
